---
description: Ensure consistent implementation of BondBridge data models for conversation cards and external card sets
globs: src/**/*.ts, src/**/*.tsx
alwaysApply: false
---

# BondBridge Data Model Standards

## Context

- When implementing or extending the card data models
- When working with conversation card types or interfaces
- When integrating with external card sets via JSON

## Critical Rules

- Always use the core data model types defined in `productContext.md`
- Never create duplicate or similar card type definitions
- Use the specific CardCategory and difficulty types (not generic strings/numbers)
- Include proper validation for external card sets using Zod schema
- Validate imported card data against the ConversationCard schema
- Keep the schema implementation simple for MVP (avoid over-engineering)

## Examples

<example>
// Correct implementation using the defined types
import { CardCategory, ConversationCard } from '../types';

const filterCards = (cards: ConversationCard[], categories: CardCategory[]): ConversationCard[] => {
  return cards.filter(card => categories.includes(card.category));
};
</example>

<example type="invalid">
// Incorrect: Creating duplicate definitions
type CardTypes = 'basic' | 'icebreaker' | 'deep'; // Wrong - should use CardCategory

interface Card { // Wrong - should use ConversationCard
  id: string;
  text: string; // Wrong - field should be "question"
  type: CardTypes; // Wrong - field should be "category" using CardCategory
}
</example>