---
description: Enforce feature-based architecture pattern for organizing components, screens, and services
globs: src/**/*.ts, src/**/*.tsx
alwaysApply: false
---

# BondBridge Feature-Based Architecture Pattern

## Context

- When creating new files or directories
- When implementing new features
- When organizing components, services, and screens

## Critical Rules

- Organize code using feature-based architecture as defined in systemPatterns.md
- Group related functionality by feature, not by technical role
- Use the directory structure: features/{feature-name}/{components|screens|services}
- Place shared utilities and components in the shared directory
- Follow established naming conventions (PascalCase for components, camelCase for functions)
- Use kebab-case for directory names

## Examples

<example>
// Correct feature-based organization
src/
├── features/
│   ├── conversation-cards/
│   │   ├── components/
│   │   │   └── ConversationCard.tsx
│   │   ├── screens/
│   │   │   └── CardScreen.tsx
│   │   └── services/
│   │       └── cardService.ts
│   └── card-sets/
│       ├── components/
│       └── services/
│           └── cardSetLoader.ts
└── shared/
    └── components/
        └── Button.tsx
</example>

<example type="invalid">
// Incorrect organization by technical role
src/
├── components/
│   ├── Card.tsx
│   └── CardSet.tsx
├── screens/
│   └── CardScreen.tsx
└── services/
    └── cardService.ts
</example>