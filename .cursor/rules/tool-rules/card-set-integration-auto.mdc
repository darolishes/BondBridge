---
description: Guide implementation of external card set loading, validation, and integration
globs: src/features/card-sets/**/*.ts, src/features/card-sets/**/*.tsx
alwaysApply: false
---

# BondBridge External Card Set Integration

## Context

- When implementing JSON file loading and validation
- When integrating external card sets
- When handling file system operations
- When managing user-provided content

## Critical Rules

- Use react-native-fs for file system operations
- Implement proper error handling for file operations
- Use Zod for schema validation of external card sets
- Scan for JSON files in the designated directory (${DocumentDirectoryPath}/cardsets)
- Validate all external content before integration
- Provide clear user feedback for successful/failed imports
- Follow the ExternalCardSet schema defined in productContext.md
- Implement graceful error recovery for malformed files

## Examples

<example>
// Correct implementation of card set loading and validation
import RNFS from 'react-native-fs';
import { z } from 'zod';

const loadCardSets = async () => {
  try {
    const cardSetPath = `${RNFS.DocumentDirectoryPath}/cardsets`;

    // Create directory if it doesn't exist
    const exists = await RNFS.exists(cardSetPath);
    if (!exists) {
      await RNFS.mkdir(cardSetPath);
      return [];
    }

    // Read directory contents
    const files = await RNFS.readDir(cardSetPath);
    const jsonFiles = files.filter(file => file.name.endsWith('.json'));

    // Process each JSON file
    const cardSets = await Promise.all(
      jsonFiles.map(async (file) => {
        try {
          const content = await RNFS.readFile(file.path, 'utf8');
          const parsedContent = JSON.parse(content);

          // Validate with Zod
          const validationResult = validateCardSet(parsedContent);

          if (validationResult.success) {
            return validationResult.data;
          } else {
            console.error(`Invalid card set: ${file.name}`, validationResult.error);
            return null;
          }
        } catch (error) {
          console.error(`Error processing file: ${file.name}`, error);
          return null;
        }
      })
    );

    // Filter out failed validations
    return cardSets.filter(Boolean);
  } catch (error) {
    console.error('Error scanning card sets directory', error);
    return [];
  }
};
</example>

<example type="invalid">
// Incorrect implementation without proper validation or error handling
const loadCardSets = async () => {
  const cardSetPath = `${RNFS.DocumentDirectoryPath}/cardsets`;
  const files = await RNFS.readDir(cardSetPath); // Missing directory existence check

  const cardSets = [];
  for (const file of files) {
    if (file.name.endsWith('.json')) {
      const content = await RNFS.readFile(file.path, 'utf8');
      const parsedContent = JSON.parse(content); // Missing try/catch for JSON parsing
      cardSets.push(parsedContent); // Missing validation before integration
    }
  }

  return cardSets;
};
</example>